// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { z } from "zod";
import { chainEnum, type default as ChainEnum } from "./ChainEnum";
import { type default as EvmAddress } from "./EvmAddress";
import { evmDecimal256, type default as EvmDecimal256 } from "./EvmDecimal256";

/** Identifier type for raw_beefy_vault */
export type Id = number & { __flavor?: "Id" };

/** Represents the table public.raw_beefy_vault */
export default interface RawBeefyVault {
    /** Database type: pg_catalog.varchar */
    id: Id;

    /** Database type: pg_catalog.timestamptz */
    eol_date: Date | null;

    /** Database type: public.chain_enum */
    chain: ChainEnum;

    /** Database type: public.evm_address */
    contract_address: EvmAddress;

    /** Database type: public.evm_address */
    strategy_address: EvmAddress;

    /** Database type: pg_catalog.varchar */
    platform_id: string | null;

    /** Database type: pg_catalog.timestamptz */
    last_harvest: Date | null;

    /** Database type: public.evm_decimal_256 */
    price_per_full_share: EvmDecimal256 | null;

    /** Database type: pg_catalog.jsonb */
    raw: unknown | null;
}

/** Represents the initializer for the table public.raw_beefy_vault */
export interface RawBeefyVaultInitializer {
    /** Database type: pg_catalog.varchar */
    id: Id;

    /** Database type: pg_catalog.timestamptz */
    eol_date?: Date | null;

    /** Database type: public.chain_enum */
    chain: ChainEnum;

    /** Database type: public.evm_address */
    contract_address: EvmAddress;

    /** Database type: public.evm_address */
    strategy_address: EvmAddress;

    /** Database type: pg_catalog.varchar */
    platform_id?: string | null;

    /** Database type: pg_catalog.timestamptz */
    last_harvest?: Date | null;

    /** Database type: public.evm_decimal_256 */
    price_per_full_share?: EvmDecimal256 | null;

    /** Database type: pg_catalog.jsonb */
    raw?: unknown | null;
}

/** Represents the mutator for the table public.raw_beefy_vault */
export interface RawBeefyVaultMutator {
    /** Database type: pg_catalog.varchar */
    id?: Id;

    /** Database type: pg_catalog.timestamptz */
    eol_date?: Date | null;

    /** Database type: public.chain_enum */
    chain?: ChainEnum;

    /** Database type: public.evm_address */
    contract_address?: EvmAddress;

    /** Database type: public.evm_address */
    strategy_address?: EvmAddress;

    /** Database type: pg_catalog.varchar */
    platform_id?: string | null;

    /** Database type: pg_catalog.timestamptz */
    last_harvest?: Date | null;

    /** Database type: public.evm_decimal_256 */
    price_per_full_share?: EvmDecimal256 | null;

    /** Database type: pg_catalog.jsonb */
    raw?: unknown | null;
}

export const id = z.string() as unknown as z.Schema<Id>;

export const rawBeefyVault = z.object({
    id: id,
    eol_date: z.date().nullable(),
    chain: chainEnum,
    contract_address: z.string().refine(v => v.length === 20, { message: "EVM address must be 20 bytes long" }),
    strategy_address: z.string().refine(v => v.length === 20, { message: "EVM address must be 20 bytes long" }),
    platform_id: z.string().nullable(),
    last_harvest: z.date().nullable(),
    price_per_full_share: evmDecimal256.nullable(),
    raw: z.unknown().nullable(),
}) as unknown as z.Schema<RawBeefyVault>;

export const rawBeefyVaultInitializer = z.object({
    id: id,
    eol_date: z.date().optional().nullable(),
    chain: chainEnum,
    contract_address: z.string().refine(v => v.length === 20, { message: "EVM address must be 20 bytes long" }),
    strategy_address: z.string().refine(v => v.length === 20, { message: "EVM address must be 20 bytes long" }),
    platform_id: z.string().optional().nullable(),
    last_harvest: z.date().optional().nullable(),
    price_per_full_share: evmDecimal256.optional().nullable(),
    raw: z.unknown().optional().nullable(),
}) as unknown as z.Schema<RawBeefyVaultInitializer>;

export const rawBeefyVaultMutator = z.object({
    id: id.optional(),
    eol_date: z.date().optional().nullable(),
    chain: chainEnum.optional(),
    contract_address: z
        .string()
        .refine(v => v.length === 20, { message: "EVM address must be 20 bytes long" })
        .optional(),
    strategy_address: z
        .string()
        .refine(v => v.length === 20, { message: "EVM address must be 20 bytes long" })
        .optional(),
    platform_id: z.string().optional().nullable(),
    last_harvest: z.date().optional().nullable(),
    price_per_full_share: evmDecimal256.optional().nullable(),
    raw: z.unknown().optional().nullable(),
}) as unknown as z.Schema<RawBeefyVaultMutator>;
